{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description": "Yggdrasil",
    "Parameters": {
        "KeyName": {
            "Type": "String",
            "Description": "The EC2 Key Pair to allow SSH access to instances"
        },
        "AvailabilityZone1": {
            "Type": "String",
            "Description": "The letter identifying your first usable AZ (a, b, c, d, or e)",
            "AllowedValues": ["a", "b", "c", "d", "e"],
            "Default": "a"
        },
        "AvailabilityZone2": {
            "Type": "String",
            "Description": "The letter identifying your second usable AZ (a, b, c, d, or e)",
            "AllowedValues": ["a", "b", "c", "d", "e"],
            "Default": "b"
        },
        "AvailabilityZone3": {
            "Type": "String",
            "Description": "The letter identifying your third usable AZ (a, b, c, d, or e)",
            "AllowedValues": ["a", "b", "c", "d", "e"],
            "Default": "c"
        },
        "EC2InstanceType" : {
            "Description" : "EC2 instance type",
            "Type" : "String",
            "Default" : "c3.2xlarge",
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "HostedZoneName" : {
            "Type": "String",
            "Description": "The name of the hosted zone you want to use for DNS"
        },
        "VpnCertsS3Prefix": {
            "Type": "String",
            "Description" : "The prefix of the VPN certs and keys (for the VPN server) in S3"
        },
        "VpnServerConfigS3Path": {
            "Type": "String",
            "Description" : "The path to the VPN server config in S3"
        },
        "MediaServerS3Path": {
            "Type": "String",
            "Description": "The path to the media content in S3"
        }
    },
    "Mappings" : {
        "CidrMap" : {
            "VPC" : {"cidr" : "172.16.0.0/16"},
            "PrivateSubnet1" : {"cidr" : "172.16.0.0/19"},
            "PrivateSubnet2" : {"cidr" : "172.16.64.0/19"},
            "PrivateSubnet3" : {"cidr" : "172.16.128.0/19"},
            "PublicSubnet1" : {"cidr" : "172.16.32.0/20"},
            "PublicSubnet2" : {"cidr" : "172.16.96.0/20"},
            "PublicSubnet3" : {"cidr" : "172.16.160.0/20"}         
        },
        "NATInstanceMap" : {
            "us-east-1" : {"64" : "ami-669d560e"}
        },
        "VPNInstanceMap" : {
            "us-east-1" : {"64" : "ami-20c90348"}
        },
        "MediaInstanceMap" : {
            "us-east-1" : {"64" : "ami-864d84ee"}        
        }
    },
    "Resources" : {
        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "CidrBlock" : { "Fn::FindInMap" : [ "CidrMap", "VPC", "cidr"]},
                "Tags" : [
                    { "Key" : "Name", "Value" : "Yggdrasil" }
                ]
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "AvailabilityZone1"}]]}, 
                "CidrBlock": { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet1", "cidr" ]},
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {"Key": "Name", "Value": "Private Subnet 1"}
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "AvailabilityZone2"}]]}, 
                "CidrBlock": { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet2", "cidr" ]},
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {"Key": "Name", "Value": "Private Subnet 2"}
                ]
            }
        },
        "PrivateSubnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "AvailabilityZone3"}]]}, 
                "CidrBlock": { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet3", "cidr" ]},
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {"Key": "Name", "Value": "Private Subnet 3"}
                ]
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "AvailabilityZone1"}]]}, 
                "CidrBlock": { "Fn::FindInMap" : [ "CidrMap", "PublicSubnet1", "cidr" ]},
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {"Key": "Name", "Value": "Public Subnet 1"}
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "AvailabilityZone2"}]]}, 
                "CidrBlock": { "Fn::FindInMap" : [ "CidrMap", "PublicSubnet2", "cidr" ]},
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {"Key": "Name", "Value": "Public Subnet 2"}
                ]
            }
        },
        "PublicSubnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "AvailabilityZone3"}]]}, 
                "CidrBlock": { "Fn::FindInMap" : [ "CidrMap", "PublicSubnet3", "cidr" ]},
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {"Key": "Name", "Value": "Public Subnet 3"}
                ]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },
        "AttachIGW" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Network", "Value" : "Public" },
                    { "Key" : "Name", "Value" : "Yggdrasil Public" }
                ]
            }
        },
        "PublicRouteToInternet" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "PrivateSubnet1",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "PublicRouteToVPNAddresses" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : ["VPNServer1"],
            "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "172.17.0.0/16",
                "InstanceId" : { "Ref" : "VPNServer1" }
            }
        },
        "PublicSubnet1RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet1" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },
        "PublicSubnet2RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet2" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },
        "PublicSubnet3RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet3" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },
        "PrivateRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Network", "Value" : "Private" },
                    { "Key" : "Name", "Value" : "Yggdrasil Private" }
                ]
            }
        },
        "PrivateRouteToNAT" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : ["PublicSubnet1", "NATInstance1"],
            "Properties" : {
                "RouteTableId" : { "Ref" : "PrivateRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId" : { "Ref" : "NATInstance1" }
            }
        },
        "PrivateRouteToVPNAddresses" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : ["VPNServer1"],
            "Properties" : {
                "RouteTableId" : { "Ref" : "PrivateRouteTable" },
                "DestinationCidrBlock" : "172.17.0.0/16",
                "InstanceId" : { "Ref" : "VPNServer1" }
            }
        },
        "PrivateSubnet1RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnet1" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },
        "PrivateSubnet2RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnet2" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },
        "PrivateSubnet3RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnet3" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },
        "NATInstance1" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "AttachIGW",
            "Properties" : {
                "InstanceType" : { "Ref" : "EC2InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "ImageId": { "Fn::FindInMap" : [ "NATInstanceMap", { "Ref" : "AWS::Region" }, "64"]},
                "Tags" : [
                    { "Key" : "Name", "Value" : "NAT1" }
                ],
                "NetworkInterfaces" : [{
                    "GroupSet" : [{ "Ref" : "NATSecurityGroup" }, { "Ref" : "PublicSecurityGroup" }],
                    "AssociatePublicIpAddress" : "true",
                    "DeviceIndex" : "0",
                    "DeleteOnTermination" : "true",
                    "SubnetId" : { "Ref" : "PublicSubnet1" }
                }],
                "SourceDestCheck" : "false",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",[
                                "#!/bin/bash",
                                "cd /home/ec2-user", 
                                "until curl -L https://github.com/rhiw/yggdrasil/archive/master.tar.gz | tar xz; do",
                                "    echo 'Cannot reach github yet, retrying in 1s'",
                                "    sleep 1",
                                "done",
                                {"Fn::Join": [" ", ["./yggdrasil-master/scripts/bash/nat.sh", 
                                                    ">",
                                                    "/var/log/nat_setup.log"]]} 
                            ]
                        ]
                    }
                }
            }
        },
        "VPNServerRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": ["vpn_server"]
            }
        },
        "VPNServer1" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "AttachIGW",
            "Properties" : {
                "InstanceType" : { "Ref" : "EC2InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "ImageId": { "Fn::FindInMap" : [ "VPNInstanceMap", { "Ref" : "AWS::Region" }, "64"]},
                "Tags" : [
                    { "Key" : "Name", "Value" : "VPN1" }
                ],
                "NetworkInterfaces" : [{
                    "GroupSet" : [{ "Ref" : "VPNServerSecurityGroup" }, { "Ref" : "PublicSecurityGroup" }, { "Ref" : "VPNAddressesSecurityGroup"}],
                    "AssociatePublicIpAddress" : "true",
                    "DeviceIndex" : "0",
                    "DeleteOnTermination" : "true",
                    "SubnetId" : { "Ref" : "PublicSubnet1" }
                }],
                "SourceDestCheck" : "false",
                "IamInstanceProfile" : { "Ref": "VPNServerRoleProfile" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",[
                                "#!/bin/bash",
                                "cd /home/ec2-user", 
                                "until curl -L https://github.com/rhiw/yggdrasil/archive/master.tar.gz | tar xz; do",
                                "    echo 'Cannot reach github yet, retrying in 1s'",
                                "    sleep 1",
                                "done",
                                {"Fn::Join": [" ", ["./yggdrasil-master/scripts/bash/vpn.sh", 
                                                    {"Ref": "VpnCertsS3Prefix"}, 
                                                    {"Ref": "VpnServerConfigS3Path"},
                                                    ">",
                                                    "/var/log/vpn_setup.log"]]} 
                            ]
                        ]
                    }
                }
            }
        },
        "MediaServerRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": ["media_server"]
            }
        },   
        "MediaServer1" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "InstanceType" : { "Ref" : "EC2InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "ImageId": { "Fn::FindInMap" : [ "MediaInstanceMap", { "Ref" : "AWS::Region" }, "64"]},
                "Tags" : [
                    { "Key" : "Name", "Value" : "Media1" }
                ],
                "NetworkInterfaces" : [{
                    "GroupSet" : [{ "Ref" : "PrivateSecurityGroup" }, { "Ref" :  "VPNAddressesSecurityGroup"}],
                    "AssociatePublicIpAddress" : "false",
                    "DeviceIndex" : "0",
                    "DeleteOnTermination" : "true",
                    "SubnetId" : { "Ref" : "PrivateSubnet1" }
                }],
                "EbsOptimized" : "true",
                "IamInstanceProfile" : { "Ref": "MediaServerRoleProfile" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",[
                                "#!/bin/bash",
                                "cd /home/ubuntu", 
                                "until curl -L https://github.com/rhiw/yggdrasil/archive/master.tar.gz | tar xz; do",
                                "    echo 'Cannot reach github yet, retrying in 1s'",
                                "    sleep 1",
                                "done",
                                {"Fn::Join": [" ", ["./yggdrasil-master/scripts/bash/media.sh", 
                                                    {"Ref": "MediaServerS3Path"}, 
                                                    ">",
                                                    "/var/log/media_setup.log"]]} 
                            ]
                        ]
                    }
                }
            }
        },
        "MediaVolume1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : "1024",
                "VolumeType" : "io1",
                "Iops" : "3000",
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MediaServer1", "AvailabilityZone" ] }
            },
            "DependsOn" : "MediaServer1"
        },
        "MediaMount1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MediaServer1" },
                "VolumeId"  : { "Ref" : "MediaVolume1" },
                "Device" : "/dev/xvdh"
            },
            "DependsOn" : "MediaVolume1"
        },
        "NATSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable access to the NAT host",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [  
                    {"IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet1", "cidr" ]}},
                    {"IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet2", "cidr" ]}},
                    {"IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet3", "cidr" ]}},
                    {"IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet1", "cidr" ]}},
                    {"IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet2", "cidr" ]}},
                    {"IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : { "Fn::FindInMap" : [ "CidrMap", "PrivateSubnet3", "cidr" ]}},
                    {"IpProtocol" : "-1", "FromPort" : "-1",  "ToPort" : "-1",  "SourceSecurityGroupId" : { "Ref" : "PrivateSecurityGroup" }},
                    {"IpProtocol" : "-1", "FromPort" : "-1",  "ToPort" : "-1",  "SourceSecurityGroupId" : { "Ref" : "VPNAddressesSecurityGroup" }}
                ]
            }
        },
        "VPNServerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable access to the VPN host",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "udp", "FromPort" : "1194",  "ToPort" : "1194",  "CidrIp" : "0.0.0.0/0"}
                ]
            }
        },
        "PublicSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable access to the public host(s)",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [                
                ]
            }
        },
        "PrivateSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable access to the private host(s)",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "-1", "FromPort" : "-1",  "ToPort" : "-1",  "SourceSecurityGroupId" : { "Ref" : "PublicSecurityGroup" }}
                ]
            }
        },
        "VPNAddressesSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable access from VPN",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "-1", "FromPort" : "-1",  "ToPort" : "-1",  "CidrIp" : "172.17.0.0/16"}
                ]
            }
        },
        "NATEip1": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {"Ref": "NATInstance1"}
            }
        },
        "VPNEip1": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {"Ref": "VPNServer1"}
            }
        },
        "VPNDNS" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : {
                    "Fn::Join" : [ "", [{ "Ref" : "HostedZoneName" }, "."]]
                },
                "Comment" : "DNS name for VPN servers.",
                "Name" : {
                    "Fn::Join" : [ "", ["vpn.", { "Ref": "AWS::StackName" }, ".", { "Ref" : "HostedZoneName" }] ]
                },
                "Type" : "A",
                "TTL" : "900",
                "ResourceRecords" : [
                    { "Ref" : "VPNEip1" }
                ]
            }
        },
        "VPNInternalDNS" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : {
                    "Fn::Join" : [ "", [{ "Ref" : "HostedZoneName" }, "."]]
                },
                "Comment" : "DNS name for VPN server 1 internal.",
                "Name" : {
                    "Fn::Join" : [ "", ["vpn.internal.", { "Ref": "AWS::StackName" }, ".", { "Ref" : "HostedZoneName" }] ]
                },
                "Type" : "A",
                "TTL" : "900",
                "ResourceRecords" : [
                    { "Fn::GetAtt" : [ "VPNServer1" , "PrivateIp" ] }
                ]
            }
        },
        "NATDNS" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : {
                    "Fn::Join" : [ "", [{ "Ref" : "HostedZoneName" }, "."]]
                },
                "Comment" : "DNS name for NAT instance.",
                "Name" : {
                    "Fn::Join" : [ "", ["nat.internal.", { "Ref": "AWS::StackName" }, ".", { "Ref" : "HostedZoneName" }] ]
                },
                "Type" : "A",
                "TTL" : "900",
                "ResourceRecords" : [
                    { "Fn::GetAtt" : [ "NATInstance1" , "PrivateIp" ] }
                ]
            }
        },
        "MediaDNSPrimary" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : {
                    "Fn::Join" : [ "", [{ "Ref" : "HostedZoneName" }, "."]]
                },
                "Comment" : "DNS name for primary media instance.",
                "Name" : {
                    "Fn::Join" : [ "", ["media.internal.", { "Ref": "AWS::StackName" }, ".", { "Ref" : "HostedZoneName" }] ]
                },
                "Type" : "A",
                "TTL" : "900",
                "ResourceRecords" : [
                    { "Fn::GetAtt" : [ "MediaServer1" , "PrivateIp" ] }
                ]
            }
        }
    },
    "Outputs" : {
        "VPCId" : {
            "Description" : "VPCId of the newly created VPC",
            "Value" :  { "Ref" : "VPC" }
        },
        "NAT1IP": {
            "Value": {"Ref": "NATEip1"}
        },
        "VPN1IP" : {
            "Value": {"Ref": "VPNEip1"}
        },
        "VPNDNS" : {
            "Value": {"Ref": "VPNDNS"}
        },
        "MediaDNS" : {
            "Value": {"Ref": "MediaDNSPrimary"}
        }
    }
}
